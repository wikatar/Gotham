// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Mission {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      String   // active, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  incidentReports IncidentReport[]

  @@map("missions")
}

model Anomaly {
  id           String   @id @default(cuid())
  title        String
  description  String?
  severity     String   // low, medium, high, critical
  resourceId   String?
  resourceType String?
  metadata     String?  // JSON as string for SQLite
  resolved     Boolean  @default(false)
  resolvedAt   DateTime?
  detectedAt   DateTime @default(now())

  // Relations
  incidentReports IncidentReport[]

  @@map("anomalies")
}

// Incident Report Model
model IncidentReport {
  id             String   @id @default(cuid())
  title          String
  description    String
  sourceType     String   // agent | anomaly | manual
  sourceId       String?  // referens till agent eller anomaly
  missionId      String?  // koppla till uppdrag
  status         String   // open | investigating | resolved
  severity       String   // low | medium | high | critical
  tags           String   // Comma-separated tags for SQLite compatibility
  createdBy      String?  // userId eller email (kan byggas ut senare)
  readToken      String   @unique // för säker delning
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  mission Mission? @relation(fields: [missionId], references: [id])
  anomaly Anomaly? @relation(fields: [sourceId], references: [id])

  @@map("incident_reports")
}

// === COLLABORATION LAYER ===

// Comment Thread - en diskussionstråd kopplad till vilken entitet som helst
model CommentThread {
  id          String   @id @default(cuid())
  entityType  String   // "mission" | "agent" | "incident" | "anomaly" | "execution"
  entityId    String   // t.ex. mission.id eller agent.id
  createdAt   DateTime @default(now())
  
  // Relations
  comments    Comment[]
  
  // Composite unique constraint - en tråd per entitet
  @@unique([entityType, entityId])
  @@index([entityType, entityId])
  @@map("comment_threads")
}

// Kommentar i en diskussionstråd
model Comment {
  id             String        @id @default(cuid())
  threadId       String
  author         String        // userId eller email
  authorName     String?       // display name för användaren
  content        String        // kommentarens innehåll
  createdAt      DateTime      @default(now())
  editedAt       DateTime?     // när kommentaren senast redigerades
  edited         Boolean       @default(false)
  deleted        Boolean       @default(false) // soft delete
  
  // Relations
  thread         CommentThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  
  @@index([threadId])
  @@index([createdAt])
  @@map("comments")
}

// Aktivitetslogg för audit trail och historik
model ActivityLog {
  id          String   @id @default(cuid())
  entityType  String   // "mission" | "agent" | "incident" | "anomaly" | "comment"
  entityId    String   // ID till den berörda entiteten
  action      String   // "created" | "updated" | "deleted" | "commented" | "resolved" | "assigned"
  actor       String   // userId eller email för personen som utförde handlingen
  actorName   String?  // display name för användaren
  description String?  // beskrivning av vad som hände
  metadata    String?  // JSON som sträng för extra data (SQLite kompatibilitet)
  createdAt   DateTime @default(now())
  
  @@index([entityType, entityId])
  @@index([actor])
  @@index([createdAt])
  @@map("activity_logs")
}

// === DATA LINEAGE LAYER ===

// Entity - generell entitet som kan refereras av LineageLog
model Entity {
  id          String   @id @default(cuid())
  type        String   // "mission" | "agent" | "incident" | "anomaly" | "execution" | "pipeline" | "datasource"
  externalId  String?  // original ID från källsystem
  name        String?  // namn på entiteten
  metadata    String?  // JSON som sträng för extra data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  lineageLogs LineageLog[]
  
  @@unique([type, externalId])
  @@index([type])
  @@map("entities")
}

// LineageLog - spårar data lineage och transformationer
model LineageLog {
  id          String   @id @default(cuid())
  entityId    String?  // koppling till entitet (om datapunkt är kopplad till något)
  pipelineId  String?  // pipeline som utförde transformationen
  agentId     String?  // AI-agent som utförde beslut eller transformation
  input       String   // vad som togs emot (JSON som sträng för SQLite kompatibilitet)
  output      String   // vad som skapades / transformerades (JSON som sträng)
  step        String   // namn på steg, t.ex. "cleaning", "enrichment", "prediction"
  source      String?  // t.ex. "Salesforce", "File Upload", "Manual"
  createdAt   DateTime @default(now())
  
  // Relations
  entity      Entity?  @relation(fields: [entityId], references: [id])
  
  @@index([entityId])
  @@index([pipelineId])
  @@index([agentId])
  @@index([step])
  @@index([createdAt])
  @@map("lineage_logs")
} 